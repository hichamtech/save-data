'use strict';

var postcss7 = require('postcss');
var shared = require('./shared-a3572f8d.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var postcss7__default = /*#__PURE__*/_interopDefaultLegacy(postcss7);

const plugin = postcss7__default["default"].plugin(shared.postcssPlugin, (options = {}) => {
    const opts = shared.getConfig(options);
    const remReplace = shared.createRemReplace(opts.rootValue, opts.unitPrecision, opts.minRemValue, opts.transformUnit);
    const satisfyPropList = shared.createPropListMatcher(opts.propList);
    return (css, result) => {
        css.walkDecls(function (decl, i) {
            // This should be the fastest test and will remove most declarations
            if (decl.value.indexOf('rem') === -1)
                return;
            if (!satisfyPropList(decl.prop))
                return;
            // @ts-ignore
            if (shared.blacklistedSelector(opts.selectorBlackList, decl.parent.selector)) {
                return;
            }
            const value = decl.value.replace(shared.remRegex, remReplace);
            // if px unit already exists, do not add or replace
            // @ts-ignore
            if (shared.declarationExists(decl.parent, decl.prop, value))
                return;
            if (opts.replace) {
                decl.value = value;
            }
            else {
                decl.parent.insertAfter(i, decl.clone({ value: value }));
            }
        });
        if (opts.mediaQuery) {
            css.walkAtRules('media', function (rule) {
                if (rule.params.indexOf('rem') === -1)
                    return;
                rule.params = rule.params.replace(shared.remRegex, remReplace);
            });
        }
    };
});

module.exports = plugin;
